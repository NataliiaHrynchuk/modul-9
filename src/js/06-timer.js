import '../css/common.css';
const refs = {
  startBtn: document.querySelector('button[data-action-start]'),
  stopBtn: document.querySelector('button[data-action-stop]'),
  clockface: document.querySelector('.js-clockface'),
};

// const timer = {
//   intervalId: null,
//   isActiv: false,
//   start() {
//     if (this.isActiv) {
//       return;
//     }
//     const startTime = Date.now();
//     this.isActiv = true;

//     this.intervalId = setInterval(() => {
      // console.log('start -> startTime', startTime);
      // const currentTime = Date.now();
      // console.log('currentTime', currentTime);
      // const deltaTime = currentTime - startTime;
      // const timeComponents = getTimeComponents(deltaTime);
      // console.log(timeComponents);
      // const { hours, mins, secs } = getTimeComponents(deltaTime);//--–¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑—É—î–º–æ –æ–±'—î–∫—Ç –∑ —Ä—è–¥–∫–∞ 76
      // console.log(`${hours}:${mins}:${secs}`);

      //--–ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ-—Ü—ñ—é updateClockface, —Ç–æ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è –≤–∂–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞,
      //-- –±–æ –≤–æ–Ω–∞ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ü—ñ—î—ó —Ñ-—Ü—ñ—ó:--
//       const time = getTimeComponents(deltaTime);
//       updateClockface(time);
//     }, 1000);
//   },
//   stop() {
//     clearInterval(this.intervalId);
//     this.isActiv = false;
//   },
// };

// timer.start(); //-- –ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
//---–ê —Ç–∞–∫ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ—é —Å—Ç–∞—Ä—Ç:--- 

refs.startBtn.addEventListener('click', () => {
  timer.start();
});

//--–ó—É–ø–∏–Ω—è—î—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ—é —Å—Ç–æ–ø:-------
refs.stopBtn.addEventListener('click', () => {
  timer.stop();
})

/*
//    * - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
//    * - –í—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –≤ –Ω–∏—Ö –≤–º–µ—â–∞–µ—Ç—Å—è —á–∞—Å–æ–≤/–º–∏–Ω—É—Ç/—Å–µ–∫—É–Ω–¥
//    * - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—å–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ hours, mins, secs
//    * - –ê–¥—Å–∫–∞—è –∫–æ–ø–∏–ø–∞—Å—Ç–∞ —Å–æ —Å—Ç–µ–∫–∞ üí©
//    */
//   function getTimeComponents(time) {
//     const hours = pad
//       (Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));
//     const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));
//     const secs = pad(Math.floor((time % (1000 * 60)) / 1000));

//     return { hours, mins, secs };
// };

  /*
//    * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Å—Ç—Ä–æ–∫–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–∞—á–∞–ª–æ 0 –µ—Å–ª–∏ —á–∏—Å–ª–æ 
–º–µ–Ω—å—à–µ 2-—Ö –∑–Ω–∞–∫–æ–≤
//    */
//   function pad(value) {
//     return String(value).padStart(2, '0');
// };

  // /*
//  * - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
//  * - –í—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤ –Ω–∏—Ö –≤–º–µ—â–∞–µ—Ç—Å—è —á–∞—Å–æ–≤/–º–∏–Ω—É—Ç/—Å–µ–∫—É–Ω–¥
//  * - –†–∏—Å—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
//  */
function updateClockface({ hours, mins, secs }) {
  refs.clockface.textContent = `${hours}:${mins}:${secs}`;
}

/**
 * ====–¢–µ–ø–µ—Ä –∑—Ä–æ–±–∏–º–æ –≤—Å–µ —á–µ—Ä–µ–∑ –∫–ª–∞—Å====
 */

class Timer {
  constructor({onTick}) {
    this.intervalId = null;
    this.isActive = false;
    this.onTick = onTick;
    

    // this.init();
  }

  // init() {
  //   const time = this.getTimeComponents(0);
  //   this.onTick(time);
  // }

  start() {
    if (this.isActive) {
      return;
    }

    const startTime = Date.now();
    this.isActive = true;

    this.intervalId = setInterval(() => {
      const currentTime = Date.now();
      const deltaTime = currentTime - startTime;
      const time = this.getTimeComponents(deltaTime);

      this.onTick(time);//--—Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ-—Ü—ñ—é updateClockface, —è–∫—É –º–∏ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º –≤–∏–∫–ª–∏–∫–∞—î–º–æ
    }, 1000);
  }

  stop() {
    clearInterval(this.intervalId);
    this.isActive = false;
    const time = this.getTimeComponents(0);
    this.onTick(time);
  }

  getTimeComponents(time) {
    const hours = this.pad
      (Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));
    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));
    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));

    return { hours, mins, secs };
  }//--—Ç–µ–ø–µ—Ä —Ü–µ –º-–¥ –∫–ª–∞—Å—É
  
  pad(value) {
    return String(value).padStart(2, '0');
} //--—Ç–µ–ø–µ—Ä —Ü–µ –º-–¥ –∫–ª–∞—Å—É
}

const timer = new Timer({
  onTick: updateClockface,
});

// refs.startBtn.addEventListener('click', timer.start.bind(timer));
// refs.stopBtn.addEventListener('click', timer.stop.bind(timer));
